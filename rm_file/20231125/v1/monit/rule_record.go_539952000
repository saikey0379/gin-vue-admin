package monit

import (
	"net/http"
	"strconv"
	"strings"

	"github.com/flipped-aurora/gin-vue-admin/server/global"
	"github.com/flipped-aurora/gin-vue-admin/server/model/common/request"
	"github.com/flipped-aurora/gin-vue-admin/server/model/common/response"
	"github.com/flipped-aurora/gin-vue-admin/server/model/monit"
	monitReq "github.com/flipped-aurora/gin-vue-admin/server/model/monit/request"
	request1 "github.com/flipped-aurora/gin-vue-admin/server/model/system/request"
	"github.com/flipped-aurora/gin-vue-admin/server/service"
	"github.com/flipped-aurora/gin-vue-admin/server/utils"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

type RuleRecordApi struct {
}

var ruleRecordService = service.ServiceGroupApp.MonitServiceGroup.RuleRecordService

type RuleRecordReqResp struct {
	monit.RuleRecord
	ClusterArray []int `json:"clusterArray"`
}

// CreateRuleRecord 创建规则配置
// @Tags RuleRecord
// @Summary 创建规则配置
// @Security ApiKeyAuth
// @accept application/json
// @Produce application/json
// @Param data body monit.RuleRecord true "创建规则配置"
// @Success 200 {string} string "{"success":true,"data":{},"msg":"创建成功"}"
// @Router /ruleRecord/createRuleRecord [post]
func (ruleRecordApi *RuleRecordApi) CreateRuleRecord(c *gin.Context) {
	var ruleRecordRequest RuleRecordReqResp
	err := c.ShouldBindJSON(&ruleRecordRequest)
	if err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}
	verify := utils.Rules{
		"Name":         {utils.NotEmpty()},
		"Describe":     {utils.NotEmpty()},
		"ClusterArray": {utils.NotEmpty()},
		"Alert":        {utils.NotEmpty()},
		"Expr":         {utils.NotEmpty()},
	}
	if err := utils.Verify(ruleRecordRequest, verify); err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}

	var ruleRecord = monit.RuleRecord{
		Name:          ruleRecordRequest.Name,
		Manager:       ruleRecordRequest.Manager,
		Describe:      ruleRecordRequest.Describe,
		Record:        ruleRecordRequest.Record,
		Alert:         ruleRecordRequest.Alert,
		Expr:          ruleRecordRequest.Expr,
		For:           ruleRecordRequest.For,
		KeepFiringFor: ruleRecordRequest.KeepFiringFor,
	}

	var clusters []string
	for _, i := range ruleRecordRequest.ClusterArray {
		cluster := strconv.Itoa(i)
		clusters = append(clusters, cluster)
	}

	ruleRecord.Clusters = strings.Join(clusters, ",")
	claims, exist := c.Get("claims")
	if !exist {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "获取用户信息失败"})
		return
	}
	claimsReal := claims.(*request1.CustomClaims)
	ruleRecord.Manager = claimsReal.Username

	if err := ruleRecordService.CreateRuleRecord(&ruleRecord); err != nil {
		global.GVA_LOG.Error("创建失败!", zap.Error(err))
		response.FailWithMessage("创建失败", c)
	} else {
		response.OkWithMessage("创建成功", c)
	}
}

// DeleteRuleRecord 删除规则配置
// @Tags RuleRecord
// @Summary 删除规则配置
// @Security ApiKeyAuth
// @accept application/json
// @Produce application/json
// @Param data body monit.RuleRecord true "删除规则配置"
// @Success 200 {string} string "{"success":true,"data":{},"msg":"删除成功"}"
// @Router /ruleRecord/deleteRuleRecord [delete]
func (ruleRecordApi *RuleRecordApi) DeleteRuleRecord(c *gin.Context) {
	var ruleRecord monit.RuleRecord
	err := c.ShouldBindJSON(&ruleRecord)
	if err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}
	if err := ruleRecordService.DeleteRuleRecord(ruleRecord); err != nil {
		global.GVA_LOG.Error("删除失败!", zap.Error(err))
		response.FailWithMessage("删除失败", c)
	} else {
		response.OkWithMessage("删除成功", c)
	}
}

// DeleteRuleRecordByIds 批量删除规则配置
// @Tags RuleRecord
// @Summary 批量删除规则配置
// @Security ApiKeyAuth
// @accept application/json
// @Produce application/json
// @Param data body request.IdsReq true "批量删除规则配置"
// @Success 200 {string} string "{"success":true,"data":{},"msg":"批量删除成功"}"
// @Router /ruleRecord/deleteRuleRecordByIds [delete]
func (ruleRecordApi *RuleRecordApi) DeleteRuleRecordByIds(c *gin.Context) {
	var IDS request.IdsReq
	err := c.ShouldBindJSON(&IDS)
	if err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}
	if err := ruleRecordService.DeleteRuleRecordByIds(IDS); err != nil {
		global.GVA_LOG.Error("批量删除失败!", zap.Error(err))
		response.FailWithMessage("批量删除失败", c)
	} else {
		response.OkWithMessage("批量删除成功", c)
	}
}

// UpdateRuleRecord 更新规则配置
// @Tags RuleRecord
// @Summary 更新规则配置
// @Security ApiKeyAuth
// @accept application/json
// @Produce application/json
// @Param data body monit.RuleRecord true "更新规则配置"
// @Success 200 {string} string "{"success":true,"data":{},"msg":"更新成功"}"
// @Router /ruleRecord/updateRuleRecord [put]
func (ruleRecordApi *RuleRecordApi) UpdateRuleRecord(c *gin.Context) {
	var ruleRecordRequest RuleRecordReqResp
	err := c.ShouldBindJSON(&ruleRecordRequest)
	if err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}
	verify := utils.Rules{
		"Name":         {utils.NotEmpty()},
		"Describe":     {utils.NotEmpty()},
		"ClusterArray": {utils.NotEmpty()},
		"Alert":        {utils.NotEmpty()},
		"Expr":         {utils.NotEmpty()},
	}
	if err := utils.Verify(ruleRecordRequest, verify); err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}

	var ruleRecord = monit.RuleRecord{
		GVA_MODEL:     ruleRecordRequest.GVA_MODEL,
		Name:          ruleRecordRequest.Name,
		Manager:       ruleRecordRequest.Manager,
		Describe:      ruleRecordRequest.Describe,
		Record:        ruleRecordRequest.Record,
		Alert:         ruleRecordRequest.Alert,
		Expr:          ruleRecordRequest.Expr,
		For:           ruleRecordRequest.For,
		KeepFiringFor: ruleRecordRequest.KeepFiringFor,
	}

	var clusters []string
	for _, i := range ruleRecordRequest.ClusterArray {
		cluster := strconv.Itoa(i)
		clusters = append(clusters, cluster)
	}

	ruleRecord.Clusters = strings.Join(clusters, ",")
	claims, exist := c.Get("claims")
	if !exist {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "获取用户信息失败"})
		return
	}
	claimsReal := claims.(*request1.CustomClaims)
	ruleRecord.Manager = claimsReal.Username

	if err := ruleRecordService.UpdateRuleRecord(ruleRecord); err != nil {
		global.GVA_LOG.Error("更新失败!", zap.Error(err))
		response.FailWithMessage("更新失败", c)
	} else {
		response.OkWithMessage("更新成功", c)
	}
}

// FindRuleRecord 用id查询规则配置
// @Tags RuleRecord
// @Summary 用id查询规则配置
// @Security ApiKeyAuth
// @accept application/json
// @Produce application/json
// @Param data query monit.RuleRecord true "用id查询规则配置"
// @Success 200 {string} string "{"success":true,"data":{},"msg":"查询成功"}"
// @Router /ruleRecord/findRuleRecord [get]
func (ruleRecordApi *RuleRecordApi) FindRuleRecord(c *gin.Context) {
	var ruleRecord monit.RuleRecord
	err := c.ShouldBindQuery(&ruleRecord)
	if err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}
	reruleRecord, err := ruleRecordService.GetRuleRecord(ruleRecord.ID)
	if err != nil {
		global.GVA_LOG.Error("查询失败!", zap.Error(err))
		response.FailWithMessage("查询失败", c)
		return
	}

	var clustersInt []int
	for _, i := range strings.Split(reruleRecord.Clusters, ",") {
		cluster, err := strconv.Atoi(i)
		if err != nil {
			global.GVA_LOG.Error("集群ID异常!", zap.Error(err))
			response.FailWithMessage("集群ID异常", c)
			return
		}

		clustersInt = append(clustersInt, cluster)
	}

	var ruleRecordResp = RuleRecordReqResp{
		RuleRecord:   reruleRecord,
		ClusterArray: clustersInt,
	}

	response.OkWithData(gin.H{"reruleRecord": ruleRecordResp}, c)

}

// GetRuleRecordList 分页获取规则配置列表
// @Tags RuleRecord
// @Summary 分页获取规则配置列表
// @Security ApiKeyAuth
// @accept application/json
// @Produce application/json
// @Param data query monitReq.RuleRecordSearch true "分页获取规则配置列表"
// @Success 200 {string} string "{"success":true,"data":{},"msg":"获取成功"}"
// @Router /ruleRecord/getRuleRecordList [get]
func (ruleRecordApi *RuleRecordApi) GetRuleRecordList(c *gin.Context) {
	var pageInfo monitReq.RuleRecordSearch
	err := c.ShouldBindQuery(&pageInfo)
	if err != nil {
		response.FailWithMessage(err.Error(), c)
		return
	}
	if list, total, err := ruleRecordService.GetRuleRecordInfoList(pageInfo); err != nil {
		global.GVA_LOG.Error("获取失败!", zap.Error(err))
		response.FailWithMessage("获取失败", c)
	} else {
		response.OkWithDetailed(response.PageResult{
			List:     list,
			Total:    total,
			Page:     pageInfo.Page,
			PageSize: pageInfo.PageSize,
		}, "获取成功", c)
	}
}
